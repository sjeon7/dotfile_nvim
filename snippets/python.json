{
    "if": {
        "prefix": "if",
        "body": ["if ${1:expression}:", "\t${2:pass}"],
        "description": "Code snippet for an if statement"
    },
    "if/else": {
        "prefix": "if/else",
        "body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"],
        "description": "Code snippet for an if statement with else"
    },
    "elif": {
        "prefix": "elif",
        "body": ["elif ${1:expression}:", "\t${2:pass}"],
        "description": "Code snippet for an elif"
    },
    "else": {
        "prefix": "else",
        "body": ["else:", "\t${1:pass}"],
        "description": "Code snippet for an else"
    },
    "while": {
        "prefix": "while",
        "body": ["while ${1:expression}:", "\t${2:pass}"],
        "description": "Code snippet for a while loop"
    },
    "while/else": {
        "prefix": "while/else",
        "body": ["while ${1:expression}:", "\t${2:pass}", "else:", "\t${3:pass}"],
        "description": "Code snippet for a while loop with else"
    },
    "for": {
        "prefix": "for",
        "body": ["for ${1:target_list} in ${2:expression_list}:", "\t${3:pass}"],
        "description": "Code snippet for a for loop"
    },
    "for/else": {
        "prefix": "for/else",
        "body": ["for ${1:target_list} in ${2:expression_list}:", "\t${3:pass}", "else:", "\t${4:pass}"],
        "description": "Code snippet for a for loop with else"
    },
    "try/except": {
        "prefix": "try/except",
        "body": ["try:", "\t${1:pass}", "except ${2:expression} as ${3:identifier}:", "\t${4:pass}"],
        "description": "Code snippet for a try/except statement"
    },
    "try/finally": {
        "prefix": "try/finally",
        "body": ["try:", "\t${1:pass}", "finally:", "\t${2:pass}"],
        "description": "Code snippet for a try/finally statement"
    },
    "try/except/else": {
        "prefix": "try/except/else",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "else:",
            "\t${5:pass}"
        ],
        "description": "Code snippet for a try/except/else statement"
    },
    "try/except/finally": {
        "prefix": "try/except/finally",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "finally:",
            "\t${5:pass}"
        ],
        "description": "Code snippet for a try/except/finally statement"
    },
    "try/except/else/finally": {
        "prefix": "try/except/else/finally",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:expression} as ${3:identifier}:",
            "\t${4:pass}",
            "else:",
            "\t${5:pass}",
            "finally:",
            "\t${6:pass}"
        ],
        "description": "Code snippet for a try/except/else/finally statement"
    },
    "with": {
        "prefix": "with",
        "body": ["with ${1:expression} as ${2:target}:", "\t${3:pass}"],
        "description": "Code snippet for a with statement"
    },
    "lambda": {
        "prefix": "lambda",
        "body": ["lambda ${1:parameter_list}: ${2:expression}"],
        "description": "Code snippet for a lambda statement"
    },
    "if(main)": {
        "prefix": "__main__",
        "body": ["if __name__ == \"__main__\":", "    ${1:pass}"],
        "description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
    },
    "async/def": {
        "prefix": "async/def",
        "body": ["async def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"],
        "description": "Code snippet for an async statement"
    },
    "async/for": {
        "prefix": "async/for",
        "body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}"],
        "description": "Code snippet for an async for statement"
    },
    "async/for/else": {
        "prefix": "async/for/else",
        "body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}", "else:", "\t${4:block}"],
        "description": "Code snippet for an async for statement with else"
    },
    "async/with": {
        "prefix": "async/with",
        "body": ["async with ${1:expr} as ${2:var}:", "\t${3:block}"],
        "description": "Code snippet for an async with statement"
    },
    "ipdb": {
        "prefix": "ipdb",
        "body": "import ipdb; ipdb.set_trace()",
        "description": "Code snippet for ipdb debug"
    },
    "pdb": {
        "prefix": "pdb",
        "body": "import pdb; pdb.set_trace()",
        "description": "Code snippet for pdb debug"
    },
    "pudb": {
        "prefix": "pudb",
        "body": "import pudb; pudb.set_trace()",
        "description": "Code snippet for pudb debug"
    },
    "add/new/cell": {
        "prefix": "add/new/cell",
        "body": "# %%",
        "description": "Code snippet to add a new cell"
    },
    "mark/markdown": {
        "prefix": "mark/markdown",
        "body": "# %% [markdown]",
        "description": "Code snippet to add a new markdown cell"
    },
    "pd_read_pickle": {
        "prefix": "prp",
        "body": ["${2:df} = pd.read_pickle(\"${1:path}\")"],
        "description": "Code snippet for a read_pickle"
    },
    "pd_to_pickle": {
        "prefix": "ptp",
        "body": ["${2:df}.to_pickle(\"${1:$path}\")"],
        "description": "Code snippet for a to_pickle"
    },
    "pd_read_excel": {
        "prefix": "pre",
        "body": ["${2:df} = pd.read_excel(\"${1:path}\")"],
        "description": "Code snippet for a read_excel"
    },
    "pd_to_excel": {
        "prefix": "pte",
        "body": ["${2:df}.to_excel(\"${1:path}\", index=${3:False})"],
        "description": "Code snippet for a to_excel"
    },
    "import": {
        "prefix": "im",
        "body": "import ${1:package/module}$0",
        "description" : "Import a package or module"
    },
    "from ... import ...": {
        "prefix": "fim",
        "body": "from ${1:package/module} import ${2:names}$0",
        "description" : "Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table."
    },
    "New class": {
        "prefix": "class",
        "body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
        "description" : "Code snippet for a class definition."
    },
    "New method": {
        "prefix": "defs",
        "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for a class method definition."
    },
    "New function": {
        "prefix": "def",
        "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for function definition."
    },
    "New property": {
        "prefix": "property",
        "body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
        "description": "New property: get and set via decorator"
    },
    "New froperty": {
        "prefix": "property",
        "body": "def ${1:foo}():\n    doc = \"${2:The $1 property.}\"\n    def fget(self):\n        ${3:return self._$1}\n    def fset(self, value):\n        ${4:self._$1 = value}\n    def fdel(self):\n        ${5:del self._$1}\n    return locals()\n$1 = property(**$1())$0",
        "description" : ""
    },
        "List comprehension": {
        "prefix": "lc",
        "body": "[${1:value} for ${2:value} in ${3:iterable}]$0",
        "description" : "List comprehension for creating a list based on existing lists."
    },
    "List comprehension if else": {
        "prefix": "lcie",
        "body": "[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:iterable}]$0", 
        "description" : "List comprehension for creating a list based on existing lists, with conditional if-else statement."
    },
    "List comprehension if filter": {
        "prefix": "lci",
        "body": "[${1:value} for ${2:value} in ${3:iterable} if ${4:condition}$0]", 
        "description" : "List comprehension for creating a list based on existing lists, with conditional if statement."
    },
    "Dictionary comprehension": {
        "prefix": "dc",
        "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable}}$0", 
        "description" : "Handy and faster way to create dictories based on existing dictionaries."
    },
    "Dictionary comprehension if filter": {
        "prefix": "dci",
        "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable} if ${6:condition}}$0", 
        "description" : "Handy and faster way to create dictories based on existing dictionaries, with conditional if statement."
    },
    "Set comprehension": {
        "prefix": "sc",
        "body": "{${1:value} for ${2:value} in ${3:iterable}}$0", 
        "description" : "Create a set based on existing iterables."
    },
    "Set Comprehension if filter": {
        "prefix": "sci",
        "body": "{${1:value} for ${2:value} in ${3:iterable} if ${4:condition}}$0", 
        "description" : "Create a set based on existing iterables, with condition if statement."
    },
    "Generator comprehension": {
        "prefix": "gc",
        "body": "(${1:key} for ${2:value} in ${3:iterable})$0", 
        "description" : "Create a generator based on existing iterables."
    },
    "Generator comprehension if filter": {
        "prefix": "gci",
        "body": "(${1:key} for ${2:value} in ${3:iterable} if ${4:condition})$0", 
        "description" : "Create a generator based on existing iterables, with condition if statement."
    }
}
